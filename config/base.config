/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/sarek Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

conda.enabled = true

params {
    max_memory                 = '340.GB'
    max_cpus                   = 64
    max_time                   = '240.h'
    max_jobs                   = 20
}

process {
    cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    shell  = ['/bin/bash', '-euo', 'pipefail']

    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 8
    maxErrors     = '-1'

    // Process-specific resource requirements
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 5
    }
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        cpus   = { check_max( 32    * task.attempt, 'cpus'    ) }
        memory = { check_max( 290.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
        maxForks = 1
    }


    withName: 'PORECHOP_ABI'{
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = '240.h'
    }

    withName: 'FASTP'{
        cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }

    // Configuration for the 'FLYE' process
    withName: 'FLYE' {
        errorStrategy = 'ignore'
    }

    // Configuration for the 'METAMDBG' process
    withName: 'METAMDBG' {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        errorStrategy = 'ignore'
    }

    // Configuration for the 'METAMDBG' process
    withName: 'CANU' {
        errorStrategy = 'ignore'
    }

        // Configuration for the 'DIAMOND_METAMDBG' process
    withName: 'DIAMOND_METAMDBG' {
        time = '240.h'
    }

        // Configuration for the 'DIAMOND_CANU' process
    withName: 'DIAMOND_CANU' {
        time = '240.h'
    }

        // Configuration for the 'DIAMOND_FLYE' process
    withName: 'DIAMOND_FLYE' {
        time = '240.h'
    }
        
    withName: 'BLASTN_METAMDBG' {
        time = '240.h'
    }

        
    withName: 'BLASTN_CANU' {
        time = '240.h'
    }

        
    withName: 'BLASTN_FLYE' {
        time = '240.h'
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}